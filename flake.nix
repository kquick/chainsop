# Generated by rustflake from the Cargo.toml and Cargo.lock
{
  inputs = {
      nixpkgs = {
          url = "github:nixos/nixpkgs/23.11";
        };
      levers = {
          url = "github:kquick/nix-levers";
          inputs.nixpkgs.follows = "nixpkgs";
        };
      anyhow-src = {
          url = "https://crates.io/api/v1/crates/anyhow/1.0.80/download";
          flake = false;
        };
      autocfg-src = {
          url = "https://crates.io/api/v1/crates/autocfg/1.1.0/download";
          flake = false;
        };
      bit-set-src = {
          url = "https://crates.io/api/v1/crates/bit-set/0.5.3/download";
          flake = false;
        };
      bit-vec-src = {
          url = "https://crates.io/api/v1/crates/bit-vec/0.6.3/download";
          flake = false;
        };
      bitflags-src = {
          url = "https://crates.io/api/v1/crates/bitflags/2.4.2/download";
          flake = false;
        };
      cfg-if-src = {
          url = "https://crates.io/api/v1/crates/cfg-if/1.0.0/download";
          flake = false;
        };
      errno-src = {
          url = "https://crates.io/api/v1/crates/errno/0.3.8/download";
          flake = false;
        };
      fastrand-src = {
          url = "https://crates.io/api/v1/crates/fastrand/2.0.1/download";
          flake = false;
        };
      fnv-src = {
          url = "https://crates.io/api/v1/crates/fnv/1.0.7/download";
          flake = false;
        };
      getrandom-src = {
          url = "https://crates.io/api/v1/crates/getrandom/0.2.12/download";
          flake = false;
        };
      glob-src = {
          url = "https://crates.io/api/v1/crates/glob/0.3.1/download";
          flake = false;
        };
      lazy_static-src = {
          url = "https://crates.io/api/v1/crates/lazy_static/1.4.0/download";
          flake = false;
        };
      libc-src = {
          url = "https://crates.io/api/v1/crates/libc/0.2.153/download";
          flake = false;
        };
      libm-src = {
          url = "https://crates.io/api/v1/crates/libm/0.2.8/download";
          flake = false;
        };
      linux-raw-sys-src = {
          url = "https://crates.io/api/v1/crates/linux-raw-sys/0.4.13/download";
          flake = false;
        };
      num-traits-src = {
          url = "https://crates.io/api/v1/crates/num-traits/0.2.18/download";
          flake = false;
        };
      ppv-lite86-src = {
          url = "https://crates.io/api/v1/crates/ppv-lite86/0.2.17/download";
          flake = false;
        };
      proc-macro2-src = {
          url = "https://crates.io/api/v1/crates/proc-macro2/1.0.78/download";
          flake = false;
        };
      proptest-src = {
          url = "https://crates.io/api/v1/crates/proptest/1.4.0/download";
          flake = false;
        };
      quick-error-src = {
          url = "https://crates.io/api/v1/crates/quick-error/1.2.3/download";
          flake = false;
        };
      quote-src = {
          url = "https://crates.io/api/v1/crates/quote/1.0.35/download";
          flake = false;
        };
      rand-src = {
          url = "https://crates.io/api/v1/crates/rand/0.8.5/download";
          flake = false;
        };
      rand_chacha-src = {
          url = "https://crates.io/api/v1/crates/rand_chacha/0.3.1/download";
          flake = false;
        };
      rand_core-src = {
          url = "https://crates.io/api/v1/crates/rand_core/0.6.4/download";
          flake = false;
        };
      rand_xorshift-src = {
          url = "https://crates.io/api/v1/crates/rand_xorshift/0.3.0/download";
          flake = false;
        };
      regex-syntax-src = {
          url = "https://crates.io/api/v1/crates/regex-syntax/0.8.2/download";
          flake = false;
        };
      rustix-src = {
          url = "https://crates.io/api/v1/crates/rustix/0.38.31/download";
          flake = false;
        };
      rusty-fork-src = {
          url = "https://crates.io/api/v1/crates/rusty-fork/0.3.0/download";
          flake = false;
        };
      syn-src = {
          url = "https://crates.io/api/v1/crates/syn/1.0.109/download";
          flake = false;
        };
      tempfile-src = {
          url = "https://crates.io/api/v1/crates/tempfile/3.10.1/download";
          flake = false;
        };
      thiserror-src = {
          url = "https://crates.io/api/v1/crates/thiserror/1.0.39/download";
          flake = false;
        };
      thiserror-impl-src = {
          url = "https://crates.io/api/v1/crates/thiserror-impl/1.0.39/download";
          flake = false;
        };
      unarray-src = {
          url = "https://crates.io/api/v1/crates/unarray/0.1.4/download";
          flake = false;
        };
      unicode-ident-src = {
          url = "https://crates.io/api/v1/crates/unicode-ident/1.0.12/download";
          flake = false;
        };
      wait-timeout-src = {
          url = "https://crates.io/api/v1/crates/wait-timeout/0.2.0/download";
          flake = false;
        };
      wasi-src = {
          url = "https://crates.io/api/v1/crates/wasi/0.11.0+wasi-snapshot-preview1/download";
          flake = false;
        };
      windows-sys-src = {
          url = "https://crates.io/api/v1/crates/windows-sys/0.52.0/download";
          flake = false;
        };
      windows-targets-src = {
          url = "https://crates.io/api/v1/crates/windows-targets/0.52.4/download";
          flake = false;
        };
      windows_aarch64_gnullvm-src = {
          url = "https://crates.io/api/v1/crates/windows_aarch64_gnullvm/0.52.4/download";
          flake = false;
        };
      windows_aarch64_msvc-src = {
          url = "https://crates.io/api/v1/crates/windows_aarch64_msvc/0.52.4/download";
          flake = false;
        };
      windows_i686_gnu-src = {
          url = "https://crates.io/api/v1/crates/windows_i686_gnu/0.52.4/download";
          flake = false;
        };
      windows_i686_msvc-src = {
          url = "https://crates.io/api/v1/crates/windows_i686_msvc/0.52.4/download";
          flake = false;
        };
      windows_x86_64_gnu-src = {
          url = "https://crates.io/api/v1/crates/windows_x86_64_gnu/0.52.4/download";
          flake = false;
        };
      windows_x86_64_gnullvm-src = {
          url = "https://crates.io/api/v1/crates/windows_x86_64_gnullvm/0.52.4/download";
          flake = false;
        };
      windows_x86_64_msvc-src = {
          url = "https://crates.io/api/v1/crates/windows_x86_64_msvc/0.52.4/download";
          flake = false;
        };
    };
  outputs = inps @ { self, nixpkgs, levers, ... }:
    {
        packages = levers.eachSystem (system:
              let pkgs = import nixpkgs { inherit system; };
                  rustBld = pname: src: version: deps:
                      pkgs.stdenv.mkDerivation {
                        pname = pname;
                        src = src;
                        version = version;
                        nativeBuildInputs = [ pkgs.rustc ];
                        unpackPhase = ''
                              runHook preUnpack
                              if [ -d $src ] ; then
                                cp -r $src/* .
                              else
                                tar zxf $src
                                cd ${pname}-${version}
                              fi
                              chmod -R u+w .
                              rm -f Cargo.lock
                              runHook postUnpack
                          '';
                        configurePhase = ''
                              runHook preConfigure
                              mkdir -p .cargo
                              echo '[source.crates-io]' >> .cargo/config.toml
                              echo 'replace-with = "vendored-sources"' >> .cargo/config.toml
                              echo '[source.vendored-sources]' >> .cargo/config.toml
                              echo 'directory = "deps-srcs"' >> .cargo/config.toml
                              mkdir -p deps-srcs
                          '' + builtins.concatStringsSep "\n" (builtins.map (s: let ss = self.packages."${system}"."${s}-unpacked"; in "ln -s ${ss} deps-srcs/${s}") deps) + ''
                              
                              
                              runHook postConfigure
                          '';
                        buildPhase = ''
                              runHook preBuild
                              ${pkgs.cargo}/bin/cargo build --offline
                              ${pkgs.cargo}/bin/cargo doc --offline
                              echo 'Documentation for <a href="${pname}/index.html">${pname} is here</a>' > target/doc/index.html
                              runHook postBuild
                          '';
                        installPhase = ''
                              runHook preInstall
                              mkdir -p $out/bin
                              for X in X $(${pkgs.findutils}/bin/find target -maxdepth 2 -executable -type f); do
                                if [ "X$X" != "XX" ]; then
                                  cp $X $out/bin/$(basename $X)
                                fi
                              done
                              mkdir $doc
                              cp -r target/doc/* $doc/
                              runHook postInstall
                          '';
                        outputs = [
                            "out"
                            "doc"
                          ];
                      };
                  rustUnpack = pname: src: version:
                      pkgs.stdenv.mkDerivation {
                        pname = "${pname}-unpacked";
                        src = src;
                        version = version;
                        dontPatchShebangs = true;
                        unpackPhase = ''
                              runHook preUnpack
                              tar zxf $src
                              if [ -d $src ] ; then
                                cp -r $src/* .
                              else
                                tar zxf $src
                                cd ${pname}-${version}
                              fi
                              rm -f Cargo.lock
                              chmod -R u+w .
                              runHook postUnpack
                          '';
                        buildPhase = "";
                        installPhase = ''
                              runHook preInstall
                              mkdir -p $out
                              cp -r ./* $out
                              rm -f $out/Cargo.lock
                              ${pkgs.coreutils-full}/bin/sha256sum $(${pkgs.findutils}/bin/find $out -type f) | ${pkgs.gnused}/bin/sed -e "s@$out/@@" > cksums
                              if [ -d $src ] ; then
                                ${pkgs.coreutils-full}/bin/sha256sum <(cd $src; tar zcf - .) | ${pkgs.gnused}/bin/sed -e "s@  .*@  package@" >> cksums
                              else
                                ${pkgs.coreutils-full}/bin/sha256sum $src | ${pkgs.gnused}/bin/sed -e "s@$src@package@" >> cksums
                              fi
                              echo -e "import json
                              with open('cksums','r') as f: d = { l.split()[1]:l.split()[0] for l in f }
                              j={'package':d['package']}
                              del d['package']
                              j['files']=d
                              print(json.dumps(j))" | ${pkgs.python3}/bin/python3 > $out/.cargo-checksum.json
                              runHook postInstall
                          '';
                        configurePhase = "";
                      };
                  source_only = path: type:
                      let is_vcs = type == "directory" && builtins.elem final [ ".git" ".github" "_darcs" ];
                          is_output = type == "directory" && final == "target";
                          is_bkp = type == "regular" && (builtins.substring (builtins.stringLength final - 1) 1 final) == "~";
                          final = builtins.baseNameOf path;
                      in  ! is_vcs && ! is_output && ! is_bkp;
              in  {
                    default = self.packages.${system}.chainsop;
                    chainsop = rustBld "chainsop" self "0.1.0" [
                        "syn"
                        "windows-targets"
                        "lazy_static"
                        "unicode-ident"
                        "windows_aarch64_gnullvm"
                        "proc-macro2"
                        "fastrand"
                        "bit-set"
                        "windows_x86_64_gnullvm"
                        "errno"
                        "proptest"
                        "rustix"
                        "wait-timeout"
                        "windows_i686_msvc"
                        "windows-sys"
                        "thiserror"
                        "windows_aarch64_msvc"
                        "anyhow"
                        "wasi"
                        "autocfg"
                        "num-traits"
                        "cfg-if"
                        "quick-error"
                        "libc"
                        "rand_core"
                        "ppv-lite86"
                        "windows_i686_gnu"
                        "quote"
                        "getrandom"
                        "rand"
                        "linux-raw-sys"
                        "regex-syntax"
                        "tempfile"
                        "rusty-fork"
                        "windows_x86_64_msvc"
                        "windows_x86_64_gnu"
                        "bit-vec"
                        "unarray"
                        "rand_chacha"
                        "thiserror-impl"
                        "libm"
                        "rand_xorshift"
                        "glob"
                        "bitflags"
                        "fnv"
                      ];
                    anyhow = rustBld "anyhow" inps.anyhow-src "1.0.80" [];
                    anyhow-unpacked = rustUnpack "anyhow" inps.anyhow-src "1.0.80";
                    autocfg = rustBld "autocfg" inps.autocfg-src "1.1.0" [];
                    autocfg-unpacked = rustUnpack "autocfg" inps.autocfg-src "1.1.0";
                    bit-set = rustBld "bit-set" inps.bit-set-src "0.5.3" [
                        "bit-vec"
                      ];
                    bit-set-unpacked = rustUnpack "bit-set" inps.bit-set-src "0.5.3";
                    bit-vec = rustBld "bit-vec" inps.bit-vec-src "0.6.3" [];
                    bit-vec-unpacked = rustUnpack "bit-vec" inps.bit-vec-src "0.6.3";
                    bitflags = rustBld "bitflags" inps.bitflags-src "2.4.2" [
                        "arbitrary"
                        "basic-toml"
                        "bytemuck"
                        "bytemuck_derive"
                        "byteorder"
                        "compiler_builtins"
                        "derive_arbitrary"
                        "glob"
                        "itoa"
                        "once_cell"
                        "proc-macro2"
                        "quote"
                        "rustc-std-workspace-core"
                        "rustversion"
                        "ryu"
                        "serde"
                        "serde_derive"
                        "serde_json"
                        "serde_test"
                        "syn"
                        "termcolor"
                        "trybuild"
                        "unicode-ident"
                        "winapi"
                        "winapi-i686-pc-windows-gnu"
                        "winapi-util"
                        "winapi-x86_64-pc-windows-gnu"
                        "zerocopy"
                        "zerocopy-derive"
                      ];
                    bitflags-unpacked = rustUnpack "bitflags" inps.bitflags-src "2.4.2";
                    cfg-if = rustBld "cfg-if" inps.cfg-if-src "1.0.0" [];
                    cfg-if-unpacked = rustUnpack "cfg-if" inps.cfg-if-src "1.0.0";
                    errno = rustBld "errno" inps.errno-src "0.3.8" [
                        "libc"
                        "windows-sys"
                      ];
                    errno-unpacked = rustUnpack "errno" inps.errno-src "0.3.8";
                    fastrand = rustBld "fastrand" inps.fastrand-src "2.0.1" [];
                    fastrand-unpacked = rustUnpack "fastrand" inps.fastrand-src "2.0.1";
                    fnv = rustBld "fnv" inps.fnv-src "1.0.7" [];
                    fnv-unpacked = rustUnpack "fnv" inps.fnv-src "1.0.7";
                    getrandom = rustBld "getrandom" inps.getrandom-src "0.2.12" [
                        "cfg-if"
                        "libc"
                        "wasi"
                      ];
                    getrandom-unpacked = rustUnpack "getrandom" inps.getrandom-src "0.2.12";
                    glob = rustBld "glob" inps.glob-src "0.3.1" [];
                    glob-unpacked = rustUnpack "glob" inps.glob-src "0.3.1";
                    lazy_static = rustBld "lazy_static" inps.lazy_static-src "1.4.0" [];
                    lazy_static-unpacked = rustUnpack "lazy_static" inps.lazy_static-src "1.4.0";
                    libc = rustBld "libc" inps.libc-src "0.2.153" [];
                    libc-unpacked = rustUnpack "libc" inps.libc-src "0.2.153";
                    libm = rustBld "libm" inps.libm-src "0.2.8" [];
                    libm-unpacked = rustUnpack "libm" inps.libm-src "0.2.8";
                    linux-raw-sys = rustBld "linux-raw-sys" inps.linux-raw-sys-src "0.4.13" [];
                    linux-raw-sys-unpacked = rustUnpack "linux-raw-sys" inps.linux-raw-sys-src "0.4.13";
                    num-traits = rustBld "num-traits" inps.num-traits-src "0.2.18" [
                        "autocfg"
                        "libm"
                      ];
                    num-traits-unpacked = rustUnpack "num-traits" inps.num-traits-src "0.2.18";
                    ppv-lite86 = rustBld "ppv-lite86" inps.ppv-lite86-src "0.2.17" [];
                    ppv-lite86-unpacked = rustUnpack "ppv-lite86" inps.ppv-lite86-src "0.2.17";
                    proc-macro2 = rustBld "proc-macro2" inps.proc-macro2-src "1.0.78" [
                        "unicode-ident"
                      ];
                    proc-macro2-unpacked = rustUnpack "proc-macro2" inps.proc-macro2-src "1.0.78";
                    proptest = rustBld "proptest" inps.proptest-src "1.4.0" [
                        "bit-set"
                        "bit-vec"
                        "bitflags"
                        "lazy_static"
                        "num-traits"
                        "rand"
                        "rand_chacha"
                        "rand_xorshift"
                        "regex-syntax"
                        "rusty-fork"
                        "tempfile"
                        "unarray"
                        "aho-corasick"
                        "autocfg"
                        "bit-set"
                        "bit-vec"
                        "bit_field"
                        "bitflags"
                        "bitflags"
                        "cc"
                        "cfg-if"
                        "errno"
                        "errno-dragonfly"
                        "fastrand"
                        "fnv"
                        "getrandom"
                        "hermit-abi"
                        "instant"
                        "io-lifetimes"
                        "lazy_static"
                        "libc"
                        "libm"
                        "linux-raw-sys"
                        "memchr"
                        "num-traits"
                        "ppv-lite86"
                        "quick-error"
                        "rand"
                        "rand_chacha"
                        "rand_core"
                        "rand_xorshift"
                        "raw-cpuid"
                        "redox_syscall"
                        "regex"
                        "regex-automata"
                        "regex-syntax"
                        "regex-syntax"
                        "rustix"
                        "rusty-fork"
                        "tempfile"
                        "unarray"
                        "wait-timeout"
                        "wasi"
                        "windows-sys"
                        "windows-targets"
                        "windows_aarch64_gnullvm"
                        "windows_aarch64_msvc"
                        "windows_i686_gnu"
                        "windows_i686_msvc"
                        "windows_x86_64_gnu"
                        "windows_x86_64_gnullvm"
                        "windows_x86_64_msvc"
                        "x86"
                      ];
                    proptest-unpacked = rustUnpack "proptest" inps.proptest-src "1.4.0";
                    quick-error = rustBld "quick-error" inps.quick-error-src "1.2.3" [];
                    quick-error-unpacked = rustUnpack "quick-error" inps.quick-error-src "1.2.3";
                    quote = rustBld "quote" inps.quote-src "1.0.35" [
                        "proc-macro2"
                      ];
                    quote-unpacked = rustUnpack "quote" inps.quote-src "1.0.35";
                    rand = rustBld "rand" inps.rand-src "0.8.5" [
                        "libc"
                        "rand_chacha"
                        "rand_core"
                        "bincode"
                        "cfg-if"
                        "getrandom"
                        "libc"
                        "libm"
                        "log"
                        "packed_simd_2"
                        "ppv-lite86"
                        "proc-macro2"
                        "quote"
                        "rand_chacha"
                        "rand_core"
                        "rand_pcg"
                        "serde"
                        "serde_derive"
                        "syn"
                        "unicode-xid"
                        "wasi"
                      ];
                    rand-unpacked = rustUnpack "rand" inps.rand-src "0.8.5";
                    rand_chacha = rustBld "rand_chacha" inps.rand_chacha-src "0.3.1" [
                        "ppv-lite86"
                        "rand_core"
                      ];
                    rand_chacha-unpacked = rustUnpack "rand_chacha" inps.rand_chacha-src "0.3.1";
                    rand_core = rustBld "rand_core" inps.rand_core-src "0.6.4" [
                        "getrandom"
                      ];
                    rand_core-unpacked = rustUnpack "rand_core" inps.rand_core-src "0.6.4";
                    rand_xorshift = rustBld "rand_xorshift" inps.rand_xorshift-src "0.3.0" [
                        "rand_core"
                      ];
                    rand_xorshift-unpacked = rustUnpack "rand_xorshift" inps.rand_xorshift-src "0.3.0";
                    regex-syntax = rustBld "regex-syntax" inps.regex-syntax-src "0.8.2" [];
                    regex-syntax-unpacked = rustUnpack "regex-syntax" inps.regex-syntax-src "0.8.2";
                    rustix = rustBld "rustix" inps.rustix-src "0.38.31" [
                        "bitflags"
                        "errno"
                        "libc"
                        "linux-raw-sys"
                        "windows-sys"
                        "adler"
                        "aho-corasick"
                        "anes"
                        "atty"
                        "autocfg"
                        "bitflags"
                        "bitflags"
                        "bumpalo"
                        "cast"
                        "cfg-if"
                        "ciborium"
                        "ciborium-io"
                        "ciborium-ll"
                        "clap"
                        "clap_lex"
                        "compiler_builtins"
                        "crc32fast"
                        "criterion"
                        "criterion-plot"
                        "crossbeam-deque"
                        "crossbeam-epoch"
                        "crossbeam-utils"
                        "ctor"
                        "dashmap"
                        "either"
                        "errno"
                        "fastrand"
                        "flate2"
                        "futures"
                        "futures-channel"
                        "futures-core"
                        "futures-executor"
                        "futures-io"
                        "futures-sink"
                        "futures-task"
                        "futures-util"
                        "half"
                        "hashbrown"
                        "hashbrown"
                        "hermit-abi"
                        "indexmap"
                        "itertools"
                        "itoa"
                        "js-sys"
                        "lazy_static"
                        "libc"
                        "linux-raw-sys"
                        "lock_api"
                        "log"
                        "memchr"
                        "memoffset"
                        "miniz_oxide"
                        "num-traits"
                        "once_cell"
                        "oorandom"
                        "os_str_bytes"
                        "parking_lot"
                        "parking_lot_core"
                        "pin-project-lite"
                        "pin-utils"
                        "plotters"
                        "plotters-backend"
                        "plotters-svg"
                        "proc-macro2"
                        "quote"
                        "rayon"
                        "rayon-core"
                        "redox_syscall"
                        "regex"
                        "regex-automata"
                        "regex-syntax"
                        "rustc-std-workspace-alloc"
                        "rustc-std-workspace-core"
                        "ryu"
                        "same-file"
                        "scopeguard"
                        "serde"
                        "serde_derive"
                        "serde_json"
                        "serial_test"
                        "serial_test_derive"
                        "slab"
                        "smallvec"
                        "static_assertions"
                        "syn"
                        "tempfile"
                        "textwrap"
                        "tinytemplate"
                        "unicode-ident"
                        "walkdir"
                        "wasm-bindgen"
                        "wasm-bindgen-backend"
                        "wasm-bindgen-macro"
                        "wasm-bindgen-macro-support"
                        "wasm-bindgen-shared"
                        "web-sys"
                        "winapi"
                        "winapi-i686-pc-windows-gnu"
                        "winapi-util"
                        "winapi-x86_64-pc-windows-gnu"
                        "windows-sys"
                        "windows-targets"
                        "windows-targets"
                        "windows_aarch64_gnullvm"
                        "windows_aarch64_gnullvm"
                        "windows_aarch64_msvc"
                        "windows_aarch64_msvc"
                        "windows_i686_gnu"
                        "windows_i686_gnu"
                        "windows_i686_msvc"
                        "windows_i686_msvc"
                        "windows_x86_64_gnu"
                        "windows_x86_64_gnu"
                        "windows_x86_64_gnullvm"
                        "windows_x86_64_gnullvm"
                        "windows_x86_64_msvc"
                        "windows_x86_64_msvc"
                      ];
                    rustix-unpacked = rustUnpack "rustix" inps.rustix-src "0.38.31";
                    rusty-fork = rustBld "rusty-fork" inps.rusty-fork-src "0.3.0" [
                        "fnv"
                        "quick-error"
                        "tempfile"
                        "wait-timeout"
                      ];
                    rusty-fork-unpacked = rustUnpack "rusty-fork" inps.rusty-fork-src "0.3.0";
                    syn = rustBld "syn" inps.syn-src "1.0.109" [
                        "proc-macro2"
                        "quote"
                        "unicode-ident"
                      ];
                    syn-unpacked = rustUnpack "syn" inps.syn-src "1.0.109";
                    tempfile = rustBld "tempfile" inps.tempfile-src "3.10.1" [
                        "cfg-if"
                        "fastrand"
                        "rustix"
                        "windows-sys"
                      ];
                    tempfile-unpacked = rustUnpack "tempfile" inps.tempfile-src "3.10.1";
                    thiserror = rustBld "thiserror" inps.thiserror-src "1.0.39" [
                        "thiserror-impl"
                      ];
                    thiserror-unpacked = rustUnpack "thiserror" inps.thiserror-src "1.0.39";
                    thiserror-impl = rustBld "thiserror-impl" inps.thiserror-impl-src "1.0.39" [
                        "proc-macro2"
                        "quote"
                        "syn"
                      ];
                    thiserror-impl-unpacked = rustUnpack "thiserror-impl" inps.thiserror-impl-src "1.0.39";
                    unarray = rustBld "unarray" inps.unarray-src "0.1.4" [];
                    unarray-unpacked = rustUnpack "unarray" inps.unarray-src "0.1.4";
                    unicode-ident = rustBld "unicode-ident" inps.unicode-ident-src "1.0.12" [];
                    unicode-ident-unpacked = rustUnpack "unicode-ident" inps.unicode-ident-src "1.0.12";
                    wait-timeout = rustBld "wait-timeout" inps.wait-timeout-src "0.2.0" [
                        "libc"
                      ];
                    wait-timeout-unpacked = rustUnpack "wait-timeout" inps.wait-timeout-src "0.2.0";
                    wasi = rustBld "wasi" inps.wasi-src "0.11.0+wasi-snapshot-preview1" [];
                    wasi-unpacked = rustUnpack "wasi" inps.wasi-src "0.11.0+wasi-snapshot-preview1";
                    windows-sys = rustBld "windows-sys" inps.windows-sys-src "0.52.0" [
                        "windows-targets"
                      ];
                    windows-sys-unpacked = rustUnpack "windows-sys" inps.windows-sys-src "0.52.0";
                    windows-targets = rustBld "windows-targets" inps.windows-targets-src "0.52.4" [
                        "windows_aarch64_gnullvm"
                        "windows_aarch64_msvc"
                        "windows_i686_gnu"
                        "windows_i686_msvc"
                        "windows_x86_64_gnu"
                        "windows_x86_64_gnullvm"
                        "windows_x86_64_msvc"
                      ];
                    windows-targets-unpacked = rustUnpack "windows-targets" inps.windows-targets-src "0.52.4";
                    windows_aarch64_gnullvm = rustBld "windows_aarch64_gnullvm" inps.windows_aarch64_gnullvm-src "0.52.4" [];
                    windows_aarch64_gnullvm-unpacked = rustUnpack "windows_aarch64_gnullvm" inps.windows_aarch64_gnullvm-src "0.52.4";
                    windows_aarch64_msvc = rustBld "windows_aarch64_msvc" inps.windows_aarch64_msvc-src "0.52.4" [];
                    windows_aarch64_msvc-unpacked = rustUnpack "windows_aarch64_msvc" inps.windows_aarch64_msvc-src "0.52.4";
                    windows_i686_gnu = rustBld "windows_i686_gnu" inps.windows_i686_gnu-src "0.52.4" [];
                    windows_i686_gnu-unpacked = rustUnpack "windows_i686_gnu" inps.windows_i686_gnu-src "0.52.4";
                    windows_i686_msvc = rustBld "windows_i686_msvc" inps.windows_i686_msvc-src "0.52.4" [];
                    windows_i686_msvc-unpacked = rustUnpack "windows_i686_msvc" inps.windows_i686_msvc-src "0.52.4";
                    windows_x86_64_gnu = rustBld "windows_x86_64_gnu" inps.windows_x86_64_gnu-src "0.52.4" [];
                    windows_x86_64_gnu-unpacked = rustUnpack "windows_x86_64_gnu" inps.windows_x86_64_gnu-src "0.52.4";
                    windows_x86_64_gnullvm = rustBld "windows_x86_64_gnullvm" inps.windows_x86_64_gnullvm-src "0.52.4" [];
                    windows_x86_64_gnullvm-unpacked = rustUnpack "windows_x86_64_gnullvm" inps.windows_x86_64_gnullvm-src "0.52.4";
                    windows_x86_64_msvc = rustBld "windows_x86_64_msvc" inps.windows_x86_64_msvc-src "0.52.4" [];
                    windows_x86_64_msvc-unpacked = rustUnpack "windows_x86_64_msvc" inps.windows_x86_64_msvc-src "0.52.4";
                  });
        devShells = levers.eachSystem (s:
              {
                default = self.packages.${s}.chainsop.overrideAttrs (o:
                      {
                        nativeBuildInputs = o.nativeBuildInputs ++ (with import nixpkgs { system=s; }; [ pkgs.rustc pkgs.cargo pkgs.clang pkgs.llvm ]);
                      });
              });
      };
}